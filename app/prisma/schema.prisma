// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuizVisibility {
  ANYONE_WITH_A_LINK
  INVITED_USERS_ONLY
}

enum QuizInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum QuestionType {
  MCQ
  MSQ
  SA
  LA
}

enum QuizAttemptStatus {
  IN_PROGRESS
  SUBMITTED
}

model User {
  id Int @id @default(autoincrement())

  clerkId String @unique
  email   String @unique

  quizzes     Quiz[]
  invitations QuizInvitation[]
  attempts    QuizAttempt[]

  @@unique([clerkId, email])
}

model Quiz {
  id Int @id @default(autoincrement())

  title        String
  instructions String

  duration Int?

  visibility   QuizVisibility
  invitedUsers QuizInvitation[]

  questions Question[]

  attempts QuizAttempt[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  @@unique([title, userId])
}

model QuizInvitation {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  status    QuizInvitationStatus @default(PENDING)
  invitedAt DateTime             @default(now())

  @@unique([userId, quizId])
}

model Question {
  id Int @id @default(autoincrement())

  question String
  type     QuestionType

  options Option[]

  answers Answer[]

  awardableMarks Int
  isRequired     Boolean

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([question, quizId])
}

model Option {
  id Int @id @default(autoincrement())

  content   String
  isCorrect Boolean

  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answers Answer[]

  @@unique([content, questionId])
}

model QuizAttempt {
  id Int @id @default(autoincrement())

  answers Answer[]

  status    QuizAttemptStatus @default(IN_PROGRESS)
  startedAt DateTime          @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
}

model Answer {
  id Int @id @default(autoincrement())

  selectedOptions Option[]
  answeredContent String?

  awardedMarks Int?

  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  attemptId Int
  attempt   QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([questionId, attemptId])
}
